// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Attacker} from "../../src/Attacker.sol";
import {Deploy} from "../../script/Deploy.s.sol";
import {Reentrancy} from "../../src/Reentrancy.sol";

import {Test, console} from "forge-std/Test.sol";

contract TestReentrancy is Test {
    Reentrancy reentrancy;
    Attacker attacker;

    address alice = makeAddr("alice");
    address bob = makeAddr("bob");
    address jeffrey = makeAddr("jeffrey");

    function setUp() public {

        Deploy deploy = new Deploy();
        (attacker, reentrancy) = deploy.run();

        deal(alice, 20 ether);
        deal(bob, 20 ether);
        deal(jeffrey, 1 ether);
    }

    function testReentrancy() public {
        vm.prank(alice);
        reentrancy.deposit{value:1 ether}();

        vm.prank(bob);
        reentrancy.deposit{value:1 ether}();

        vm.prank(jeffrey);
        reentrancy.deposit{value:1 ether}();

        attacker.deposit{value:1 ether}();

        uint256 contractBalance = address(reentrancy).balance;
        assertEq(contractBalance, 4 ether);


        attacker.withdrawEther();

        uint256 contractBalanceNow = address(reentrancy).balance;

        assertEq(contractBalanceNow, 0);
        assertEq(address(attacker).balance, 4 ether);

        console.log(reentrancy.getBalance(alice));
        console.log(address(reentrancy).balance);
        vm.prank(alice);
        reentrancy.deposit{value:4 ether}();

        attacker.deposit{value: 1 ether}();

        uint256 currentBalance = address(reentrancy).balance;
        assertEq(reentrancy.getBalance(alice), 4 ether);
        assertEq(reentrancy.getBalance(address(attacker)), 1 ether);
        assertEq(currentBalance, 5 ether);

    }
}