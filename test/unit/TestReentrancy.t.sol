// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Attacker} from "../../src/Attacker.sol";
import {Deploy} from "../../script/Deploy.s.sol";
import {Reentrancy} from "../../src/Reentrancy.sol";

import {Test, console} from "forge-std/Test.sol";

contract TestReentrancy is Test {
    Attacker attacker;
    Reentrancy reentrancy;

    address alice = makeAddr("alice");
    address bob = makeAddr("bob");
    address jeffrey = makeAddr("jeffrey");

    function setUp() public {
        Deploy deploy = new Deploy();
        (attacker, reentrancy) = deploy.run();

        deal(alice, 20 ether);
        deal(bob, 20 ether);
        deal(jeffrey, 1 ether);
    }

    modifier depositEther() {
        vm.prank(alice);
        reentrancy.deposit{value: 1 ether}();

        vm.prank(bob);
        reentrancy.deposit{value: 1 ether}();

        vm.prank(jeffrey);
        reentrancy.deposit{value: 1 ether}();

        attacker.deposit{value: 1 ether}();
        _;
    }

    function testReentrancy() public depositEther {
        uint256 contractBalance = address(reentrancy).balance;
        assertEq(contractBalance, 4 ether);

        /**
         * @dev Reentrancy attack here
         */
        attacker.withdrawEther();

        uint256 contractBalanceNow = address(reentrancy).balance;

        assertEq(contractBalanceNow, 0);
        assertEq(address(attacker).balance, 5 ether);
    }

    /**
     * @dev This test works when attacker calls withdraw2 function of reentrancy which is
     * a patch of reentrancy in withdraw
     */
    function testReentrantPatch() public depositEther {
        uint256 contractBalance = address(reentrancy).balance;
        assertEq(contractBalance, 4 ether);

        /**
         * @dev Reentrancy attack fails
         */
        vm.expectRevert();
        attacker.withdrawEther();

        uint256 contractBalanceNow = address(reentrancy).balance;

        assertEq(contractBalanceNow, 4 ether);
    }

    /**
     * @notice In attacker contract, even though we used AddSubtract to call sum, we
     * passed AddSubtrac contract's address to it which has same function signatures,
     * but different implementation resulting in different value
     */
    function testExternalContractReferencingWorks() public view {
        uint256 result = attacker.sum(1, 2);
        assertEq(result, 2);
    }
}
