// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Attacker} from "../../src/Attacker.sol";
import {Deploy} from "../../script/Deploy.s.sol";
import {Reentrancy} from "../../src/Reentrancy.sol";
import {DelegateCall} from "../../src/DelegateCall.sol";

import {Test, console} from "forge-std/Test.sol";

contract TestReentrancy is Test {
    Attacker attacker;
    Reentrancy reentrancy;
    DelegateCall emptyContract;

    address alice = makeAddr("alice");
    address bob = makeAddr("bob");
    address jeffrey = makeAddr("jeffrey");


    function setUp() public {

        Deploy deploy = new Deploy();
        (attacker, reentrancy, emptyContract) = deploy.run();

        deal(alice, 20 ether);
        deal(bob, 20 ether);
        deal(jeffrey, 1 ether);
    }

    modifier depositEther() {
        vm.prank(alice);
        reentrancy.deposit{value:1 ether}();

        vm.prank(bob);
        reentrancy.deposit{value:1 ether}();

        vm.prank(jeffrey);
        reentrancy.deposit{value:1 ether}();

        attacker.deposit{value:1 ether}();
        _;
    }

    function testReentrancy() public depositEther {

        uint256 contractBalance = address(reentrancy).balance;
        assertEq(contractBalance, 4 ether);

        /**
         * @dev Reentrancy attack here
         */
        attacker.withdrawEther();

        uint256 contractBalanceNow = address(reentrancy).balance;

        assertEq(contractBalanceNow, 0);
        assertEq(address(attacker).balance, 5 ether);
    }

    function testReentrantPatch() public depositEther {
        uint256 contractBalance = address(reentrancy).balance;
        assertEq(contractBalance, 4 ether);

        /**
         * @dev Reentrancy attack fails
         */
        vm.expectRevert();
        attacker.withdrawEther();

        uint256 contractBalanceNow = address(reentrancy).balance;

        assertEq(contractBalanceNow, 4 ether);
    }

    function testEmptyContractReceivesEther() public {
        
    }
}