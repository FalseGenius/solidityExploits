// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Reentrancy} from "./Reentrancy.sol";
import {Fibonnaci} from "./Fibonacci.sol";


/**
 * @notice Charity contract
 */
contract DelegateCallBank {
    error Reentrancy__WithdrawalUnsuccessful();
    error DelegateCallBank__YouAreNotTheOwner();
    error DelegateCallBank__ContractHasZeroBalance();
    error DelegateCallBank__ErrorDuringDelegateCall();

    address private owner;
    Fibonnaci private fib;
    uint256 fibNumber;

    constructor() {
        owner = msg.sender;
        fib = new Fibonnaci();
    }

    function setFib() public {
        (bool success,) = address(fib).delegatecall(abi.encodeWithSignature("setN(uint256)", 3));
        if (!success) revert DelegateCallBank__ErrorDuringDelegateCall();
    }

    function getFibonnaci() public returns (uint256) {
        return fib.fibonnaci();
    }

    function withdraw() public {
        uint256 balance = address(this).balance;
        if (balance == 0) revert DelegateCallBank__ContractHasZeroBalance();

        (bool success,) = payable(owner).call{value:balance}("");
        if (!success) revert Reentrancy__WithdrawalUnsuccessful();

    }

    receive() external payable {}
}